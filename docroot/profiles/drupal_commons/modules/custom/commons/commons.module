<?php
// $Id$

/*
 * Implementation of hook_menu()
 */
function commons_menu() {
  return array(
    'admin/settings/commons' => array(
      'title' => 'Drupal Commons',
      'description' => 'Configure settings for the Drupal Commons environment',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commons_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/*
 * Implemenation of hook_admin_settings()
 */
function commons_admin_settings() {
  $form = array();
  
  $form['general_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['general_settings']['commons_force_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force users to login'),
    '#default_value' => variable_get('commons_force_login', 0),
    '#description' => t('If checked, anonymous users will be redirected from all pages to a log in page.'),
  );
  
  $form['general_settings']['commons_recent_join_interval'] = array(
    '#type' => 'select',
    '#title' => t('Recent joins time-frame'),
    '#default_value' => variable_get('commons_recent_join_interval', '3 months'),
    '#options' => array(
      '3 days' => '3 days',
      '1 week' => '1 week',
      '2 weeks' => '2 weeks',
      '1 month' => '1 month',
      '3 months' => '3 months',
      '6 months' => '6 months',
    ),
    '#description' => t('The !user_directory contains a block that indicates the amount of recently joined members. Select the time-frame to be used to calculate this value.', array('!user_directory' => l(t('user directory'), 'users'))),
  );
  
  $form['general_settings']['commons_manager_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Community manager role'),
    '#required' => TRUE,
    '#default_value' => variable_get('commons_manager_role', 'community manager'),
    '#description' => t('The name of the role given to community managers.'),
  );
  
  $form['group_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Group settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['group_settings']['commons_group_tab_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Group homepage tab'),
    '#default_value' => variable_get('commons_group_tab_title', 'Home'),
    '#description' => t('Specify what the group homepage tab title should be. If left empty, the tab title will be <i>View</i>.'),
  );
  
  $form['group_settings']['commons_hide_shoutbox_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove Shoutbox link'),
    '#default_value' => variable_get('commons_hide_shoutbox_link', 1),
    '#description' => t('If checked, the Shoutbox link will be removed from the Group details menu.'),
  );
  
  $form['group_settings']['commons_email_selective_group'] = array(
    '#type' => 'checkbox',
    '#title' => t('Alert users when added to a selective group'),
    '#default_value' => variable_get('commons_email_selective_group', 1),
    '#description' => t('If checked, an email alert will be sent to users that are added to groups that are marked as either invite-only or closed.'),
  );
  
  $form['group_settings']['commons_group_prevent_open_voting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict voting to group members'),
    '#default_value' => variable_get('commons_group_prevent_open_voting', 0),
    '#description' => t('If checked, only group members will be able to vote on polls that are part of a given group.'),
  );
  
  $form['group_settings']['commons_group_prevent_open_commenting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict commenting to group members'),
    '#default_value' => variable_get('commons_group_prevent_open_commenting', 0),
    '#description' => t('If checked, only group members will be able to comment on nodes that are part of a given group.'),
  );

  return system_settings_form($form); 
}

/*
 * Implementation of hook_menu_alter()
 */
function commons_menu_alter(&$items) {
  // Override group node tab title from 'View' to 'Home'
  $items['node/%node/view']['title callback'] = 'commons_set_node_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  
  // Move OG_Aggregator menu tab to far right
  $items['node/%node/aggregator']['weight'] = 100;
}

// Callback for group node tab titles
function commons_set_node_tab_title($node) {
  if ($title = variable_get('commons_group_tab_title', 'Home')) {
    if (og_is_group_type($node->type)) {
      return $title;
    }
  }
  
  return t('View');
}

// Optionally remove Shoutbox link from Group Menu
function commons_og_links_alter(&$links, &$node) {
  if (variable_get('commons_hide_shoutbox_link', 1)) {
    unset($links['shoutbox']);
  }
}

/*
 * Implementation of hook_block()
 */
function commons_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('User statistics'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );
    $blocks[1] = array(
      'info' => t('Jumpstart your community!'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );

    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array(
          'subject' => t('User statistics'),
          'content' => _commons_user_stats_block()
        );
        break;
      case 1:
        $block = array(
          'subject' => t('Jumpstart your community!'),
          'content' => _commons_jumpstart_community_block()
        );
        break;
    }
    return $block;
  }  
}

// Display a block with global user statistics
function _commons_user_stats_block() {
  $data = array();
  
  // Determine total users on the site
  $total = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE status = 1"));
  $data[] = t('%members', array('%members' => format_plural($total, '1 user', '@count users')));
  
  // Determine recently joined users
  $total = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE status = 1 AND created > %d", strtotime('-' . variable_get('commons_recent_join_interval', '3 months'), time())));
  $data[] = t('%members', array('%members' => format_plural($total, '1 recently joined member', '@count recently joined members')));
  
  return theme('commons_user_stats_block', $data);
}

// Display "jumpstart" block
function _commons_jumpstart_community_block() {
  return t('!view, or !create new <strong>groups</strong> to start creating your community!', array('!view' => l(t('View'), 'groups'), '!create' => l(t('create'), 'node/add/group')));
}

/*
 * Implementation of hook_form_alter()
 */
function commons_form_alter(&$form, &$form_state, $form_id) {
  // A node is being added or edited
  if (strstr($form_id, 'node_form')) {
    // Remove default "Promoted to Front Page" option
    unset($form['options']['promote']);
  
    // Check if this is a group type
    if (module_exists('og')) {
      if (og_is_group_type(str_replace('_node_form', '', $form_id))) {
        // Make user's aware of the max length
        $maxlength = $form['og_description']['#maxlength'];
        $form['og_description']['#description'] = $form['og_description']['#description'] . ' (' . t('!maxlength characters allowed', array('!maxlength' => $maxlength)) . ')'; 
      }
    }
  }
  
  // Optionally restrict voting only to members of the group that
  // the poll is in
  if ($form_id == 'poll_view_voting') {
    // Check the variable
    if (variable_get('commons_group_prevent_open_voting', 0)) { 
      // Extract the poll node itself
      $poll = $form['#node'];
        
      commons_group_restrict_form($poll, $form, t('vote'), array('vote'));
    }
  }
  
  // Optionally restrict commenting only to members of the group that
  // the node is in
  if ($form_id == 'comment_form') {
    // Check the variable
    if (variable_get('commons_group_prevent_open_commenting', 0)) { 
      // Determine the node
      // The node ID is either located at node/id or comment/reply/id
      $node = (arg(0) == 'node') ? node_load(arg(1)) : node_load(arg(2));  
        
      // Make sure the node loaded correctly
      if ($node) {
        commons_group_restrict_form($node, $form, t('comment'));
      }
    }
  }
}

/*
 * Alter a form based on the current user's group membership status
 * 
 * If the current user is not a member of any of the given group(s)
 * associated with the $node, then remove $elements from the form
 * 
 * @param $node
 *   The group post node
 * @param $form
 *   The form to alter, passed in as reference
 * @param $action
 *   A string representing the action that is being prevented (Eg, comment)
 * @param $elements
 *   The form element identified to remove. If omitted, the entire form will be
 *   removed
 */
function commons_group_restrict_form($node, &$form, $action, $elements = array()) {
  // Make sure OG is enabled  
  if (!module_exists('og')) {
    return; 
  }
  
  //Determine which groups the poll belongs to
  $groups = og_get_node_groups($node);
        
  // Only act if this poll is part of a group
  if (count($groups)) {
    $access = FALSE;
          
    // Iterate through the groups, checking for membership
    foreach ($groups as $id => $name) {
      if (og_is_group_member($id)) {
        // Indicate that the user is a member of at least one group
        $access = TRUE;
        break; 
      }
    }
        
    // If the user isn't a member of any of the groups, they can't
    // vote on this poll
    if (!$access) {
      // Unset the specified elements
      if (empty($elements)) {
        // If non specified, remove the whole form
        $form = '';
      }
      else {
        foreach ($elements as $element) {
          unset($form[$element]);
        }
      }
      
      //Let user know why they can't act
      $form['denied_message'] = array(
        '#type' => 'item',
        '#value' => t('You must be a member of the group to !action', array('!action' => $action)),
      );
    } 
  }
}

/*
 * Implementation of hook_og()
 */
function commons_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
    case 'user delete':
      // Load the group object
      $group = node_load($gid);
      og_load_group($group);
      
      // Load the user
      $user = user_load($uid);
      
      // Should we try to send an email alert?
      if (variable_get('commons_email_selective_group', 1)) {
        // Don't act if this is the group creator
        if ($group->uid != $user->uid) {
          // Only act if the group is invite-only or closed
          if ($group->og_selective == OG_INVITE_ONLY ||
            $group->og_selective == OG_CLOSED) {
            // Send the email alert
            drupal_mail(
              'commons',
              "og $op",
              $user->mail,
              language_default(),
              array('group' => $group)
            );
          }
        }
      }
      
      break;
  }
}

/*
 * Implementation of hook_mail()
 */
function commons_mail($key, &$message, $params) {
  switch ($key) {
    case 'og user delete':
      $message['subject'] = t('You have been removed from !group', array('!group' => $params['group']->title));
      $message['body'] = t('A manager from !group has removed you from the group.', array('!group' => $params['group']->title));
      break;
    
    case 'og user insert':
      global $base_url;
      $link = $base_url . '/' . ($params['group']->path ? $params['group']->path : ('node/' . $params['group']->nid));
      $message['subject'] = t('You have been added to !group', array('!group' => $params['group']->title));
      $message['body'] = t('A manager from !group has added you to the group.', array('!group' => $params['group']->title));
      $message['body'] .= "\n\n\n";
      $message['body'] .= t('The group is located at !link', array('!link' => $link));
      break;
  }
}

/*
 * Implementation of hook_field_access()
 */
function commons_field_access($op, $field, $account = NULL, $node = NULL) {
  if ($field['field_name'] == 'field_group_sticky') {
    switch($op) {
      case 'view':
      case 'edit':
        // If on node add form, use og_get_group_context() to determine group
        if (arg(0) == 'node' && arg(1) == 'add' && ($group = og_get_group_context())) {
          // hook_nodeapi() validates group admin status if additional
          // groups are selected
          
          // Show only under the following conditions
          if (!og_is_group_admin($group, $account) && 
              !user_access('administer nodes') && 
              !array_search(variable_get('commons_manager_role', 'community manager'), $account->roles)) {
          
            return FALSE;
          }
          else {
            return TRUE;
          }
        }
      
        /*
         * If here, we're now viewing the node. Must handle access controls
         * for editablefields.module
         */

        if ($node) {
          // Determine all group affiliations for the current node
          $groups = og_get_node_groups($node);
          
          // If no group affiliates, never show
          if (empty($groups)) {
            return FALSE;
          }
          
          // Users with admin nodes permission and community manager role can always edit
          if (user_access('administer nodes') || array_search(variable_get('commons_manager_role', 'community manager'), $account->roles)) {
            return TRUE;
          }

          // Check that current user is the admin of all groups
          foreach ($groups as $nid => $group) {
            if (!og_is_group_admin(node_load($nid))) {
              return FALSE;
            }
          }
        }
        
        return TRUE;
    }
  }
}

/*
 * Implementation of hook_init()
 */
function commons_init() {
  // Exit if coming from the command-line (needed for drush)
  // or if we're not calling index.php (so cron.php, xmlrpc.php, etc, works)
  if ((php_sapi_name() == 'cli') ||
    (str_replace(base_path(), '', $_SERVER['SCRIPT_NAME']) != 'index.php')) {
    return;
  }

  //  Force anonymous users to a login page
  if (variable_get('commons_force_login', 0)) {
    global $user;
  
    // If anonymous
    if (!$user->uid) {
      //  Avoid endless redirect and allow for user registration/creation/login
      //  Checking arg(1) for numeric value prevents /user/# path
      if (arg(0) != 'user' || is_numeric(arg(1))) {
        // Redirect to home
        if ($dest = $_GET['q']) {
          // If the user was trying to reach a certain page,
          // try to preserve the redirection after login
          drupal_goto('user', "destination=$dest");
        }
        else {
          drupal_goto('user');
        }
      }
    }
  }
  
  // We've overridden /og with a custom view, so redirect
  if (arg(0) == 'og' && !arg(1)) {
    drupal_goto('groups');
  }
  
  // We've overridden /og/my with a custom view, so redirect
  if (arg(0) == 'og' && arg(1) == 'my') {
    drupal_goto('groups/my');
  }
  
  // Redirect core /profile which lists users to our new list of users
  if (arg(0) == 'profile' && !arg(1)) {
    drupal_goto('users');
  }
  
  // Temporary fix for a ctools (1.6) bug causing the page title
  // on searches to change
  if (arg(0) == 'search') {
    drupal_set_title(t('Search')); 
  }
  
  // Notify group admins of any pending requests on group home page
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    // Load the current user
    global $user;
    
    // Check to see if user is logged in
    if ($user->uid) {
      // Load the current node
      $node = node_load(arg(1));
      // Determine if this is a group
      if (og_is_group_type($node->type)) {
        // Check if current member is an admin
        if (og_is_group_admin($node, $user)) {
          // Check if there are pending requests
          $count = db_result(db_query("
            SELECT COUNT(uid) FROM {og_uid} 
            WHERE nid = %d AND is_active = 0", $node->nid));
            
          if ($count) {
            drupal_set_message(t('There are currently !count pending membership requests. Click !here to view them.', array('!count' => $count, '!here' => l('here', 'og/users/' . $node->nid))));
          }
        }
      }
    }
  }
  
  // Set the breadcrumbs
  commons_set_breadcrumb($_GET['q']);
}

/*
 * Dynamically set the breadcrumbs
 * 
 * Commons ships with a large amount of panels, views,
 * and dynamic content. This result in missing or incorrect
 * breadcrumbs.
 * 
 * @param $path
 *   The requested path (Eg, node/2)
 */
function commons_set_breadcrumb($path) {
  $breadcrumb = array();
  
  // Break the path into pieces
  $path = explode('/', $path);
  
  switch ($path[0]) {
    case 'taxonomy':
      $breadcrumb[] = l(t('Tags'), 'tagadelic');
      break;
      
    case 'content':
      if ($path[1]) {
        $breadcrumb[] = l(t('Community'), 'groups'); 
      }
      break;
    
    case 'notices':
    case 'featured':
    case 'userpoints':
    case 'users':
    case 'analytics':
    case 'tagadelic':
      $breadcrumb[] = l(t('Community'), 'groups');
      break;
      
    case 'groups':
      if ($path[1]) {
        $breadcrumb[] = l(t('Groups'), 'groups'); 
      }
      break;
      
    case 'group':
    case 'bookmarks':
    case 'relationships':
    case 'myuserpoints':
      $breadcrumb[] = l(t('My account'), 'user');
      break;
      
    case 'node':
      if (is_numeric($path[1])) {
        switch ($path[2]) {
          case 'content':
          case 'aggregator':
            $group = node_load($path[1]);
            $breadcrumb[] = l(t('Groups'), 'groups');
            $breadcrumb[] = l($group->title, 'node/' . $group->nid);
            break;
        }
      }
      break;
      
    case 'og':
      if (is_numeric($path[2])) {
        switch ($path[1]) {
          case 'users':
          case 'search':
            $group = node_load($path[2]);
            $breadcrumb[] = l(t('Groups'), 'groups');
            $breadcrumb[] = l($group->title, 'node/' . $group->nid); 
        }
      }
      break;
  }
  
  // Check if we've added any breadcrumbs
  if (!empty($breadcrumb)) {
    // If so, add a frontpage link to the beginning
    array_unshift($breadcrumb, l(t('Home'), '<front>'));
    
    // And set them
    drupal_set_breadcrumb($breadcrumb);
  }
}

/*
 * Implementation of hook_nodeapi()
 */
function commons_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  
  switch ($op) {
    case 'validate':
      // Only act if the node was toggled as sticky
      if ($node->field_group_sticky[0]['value'] == 'Sticky') {
        $selected_groups = array();
        
        // Gather checked group ids, if any
        if (isset($node->og_groups)) {
          foreach ($node->og_groups as $gid) {
            // Capture only checked groups
            if ($gid) {
              $selected_groups[] = $gid;
            }
          }
        }

        // Check if any group options were checked
        if (!empty($selected_groups)) {
          // If inadequate permissions & roles, then check for group admin status in each group
          if (!user_access('administer nodes') && !array_search(variable_get('commons_manager_role', 'community manager'), $user->roles)) {
            foreach ($selected_groups as $gid) {
              if (!og_is_group_admin(node_load($gid), $user)) {
                form_set_error('og_groups', t('You can only make posts sticky for the groups that you are an admin for.')); 
              }
            }
          }
        }
        else {
          // No groups were selected
          form_set_error('field_group_sticky', t('You must specify a group in order to make this post group sticky.')); 
        }
      }
      
      break;
  }
}

// TAGGING

/*
 * Implementation of hook_tagging_suggestions()
 */
function commons_tagging_suggestions($vid, $node) {
  $suggestions = array();
  
  // Check if there are suggestions stored
  if ($tags = variable_get('commons_tag_suggestions', '')) {
    $tags = array_reverse(explode(',', $tags));
    foreach ($tags as $tag) {
      $suggestions[] = array(
        '#name' => trim($tag),
      );
    }
  }

  return $suggestions;
}

/*
 * Implementation of hook_form_tagging_admin_settings_alter()
 */
function commons_form_tagging_admin_settings_alter(&$form, &$form_state) {
  // Tell tagging to check hooks for suggestions
  variable_set('tagging_show_suggestion_example', 0);
  
  // Remove checkbox
  unset($form['tagging_show_suggestion_example']);
  
  // Add a field to supply static suggestions
  $form['commons_tag_suggestions'] = array(
    '#type' => 'textarea',
    '#title' => t('Static Tag Suggestions'),
    '#description' => t('Enter a comma-separated list of terms that will show up as tag suggestions when creating content items.'),
    '#weight' => -5,
    '#default_value' => variable_get('commons_tag_suggestions', ''),
  );
}

// THEME

/*
 * Implementation of hook_theme()
 */
function commons_theme() {
  return array(
    'commons_user_stats_block' => array(),
  );
}

// Theme handler for user stats block
function theme_commons_user_stats_block($data) {
  $content = '<ul>';
  foreach($data as $item) {
    $content .= '<li>' . $item . '</li>';
  }
  $content .= '</ul>';
  
  return $content;
}
