<?php
// $Id: commons.module

/*
 * Implementation of hook_menu()
 */
function commons_menu() {
  return array(
    'admin/settings/commons' => array(
      'title' => 'Drupal Commons',
      'description' => 'Configure settings for the Drupal Commons environment',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commons_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/*
 * Implemenation of hook_admin_settings()
 */
function commons_admin_settings() {
  $form = array();
  
  $form['general_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => TRUE,
  );
  
  $form['general_settings']['commons_force_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force Users to Login'),
    '#default_value' => variable_get('commons_force_login', 0),
    '#description' => t('If checked, anonymous users will be redirected from all pages to a log in page.'),
  );
  
  $form['general_settings']['commons_manager_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Community Manager Role'),
    '#required' => TRUE,
    '#default_value' => variable_get('commons_manager_role', 'community manager'),
    '#description' => t('The name of the role given to community managers.'),
  );
  
  return system_settings_form($form); 
}

/*
 * Implementation of hook_menu_alter()
 */
function commons_menu_alter(&$items) {
  // Override group node tab title from 'View' to 'Home'
  $items['node/%node/view']['title callback'] = 'commons_set_node_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  
  // Move OG_Aggregator menu tab to far right
  $items['node/%node/aggregator']['weight'] = 100;
}

// Callback for group node tab titles
function commons_set_node_tab_title($node) {
  if (og_is_group_type($node->type)) {
    return t('Home');
  }
  else {
    return t('View');
  }
}

/*
 * Implementation of hook_block()
 */
function commons_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('User Statistics'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );

    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array(
          'subject' => t('User Statistics'),
          'content' => _commons_user_stats_block()
        );
        
        break;
    }
    return $block;
  }  
}

// Display a block with global user statistics
function _commons_user_stats_block() {
  $data = array();
  
  // Determine total users on the site
  $total = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE status = 1"));
  $data[] = t('%members', array('%members' => format_plural($total, '1 user', '@count users')));
  
  // Determine recently joined users (within 90 days)
  $total = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE status = 1 AND created > %d", strtotime('-90 days', time())));
  $data[] = t('%members', array('%members' => format_plural($total, '1 recently joined member', '@count recently joined members')));
  
  return theme('commons_user_stats_block', $data);
}

/*
 * Implementation of hook_form_alter()
 */
function commons_form_alter(&$form, &$form_state, $form_id) {
  // A node is being added or edited
  if (strstr($form_id, 'node_form')) {
    // Remove default "Promoted to Front Page" option
    unset($form['options']['promote']);
  }
}

/*
 * Implementation of hook_field_access()
 */
function commons_field_access($op, $field, $account = NULL, $node = NULL) {
  if ($field['field_name'] == 'field_group_sticky') {
    switch($op) {
      case 'view':
      case 'edit':
        // If on node add form, use og_get_group_context() to determine group
        if (arg(0) == 'node' && arg(1) == 'add' && ($group = og_get_group_context())) {
          // hook_nodeapi() validates group admin status if additional
          // groups are selected
          
          // Show only under the following conditions
          if (!og_is_group_admin($group, $account) && 
              !user_access('administer nodes') && 
              !array_search(variable_get('commons_manager_role', 'community manager'), $account->roles)) {
          
            return FALSE;
          }
          else {
            return TRUE;
          }
        }
      
        /*
         * If here, we're now viewing the node. Must handle access controls
         * for editablefields.module
         */

        if ($node) {
          // Determine all group affiliations for the current node
          $groups = og_get_node_groups($node);
          
          // If no group affiliates, never show
          if (empty($groups)) {
            return FALSE;
          }
          
          // Users with admin nodes permission and community manager role can always edit
          if (user_access('administer nodes') || array_search(variable_get('commons_manager_role', 'community manager'), $account->roles)) {
            return TRUE;
          }

          // Check that current user is the admin of all groups
          foreach ($groups as $nid => $group) {
            if (!og_is_group_admin(node_load($nid))) {
              return FALSE;
            }
          }
        }
        
        return TRUE;
    }
  }
}

//  Force anonymous users to a login page
function commons_init() {
  // Check settings first
  if (variable_get('commons_force_login', 0)) {
    global $user;
  
    // If anonymous
    if (!$user->uid) {
      //  Avoid endless redirect and allow for user registration/creation/login
      //  Checking arg(1) for numeric value prevents /user/# path
      if ((arg(0) != 'user' || is_numeric(arg(1))) && $_GET['q'] != 'install.php') {
        // Redirect to home
        drupal_goto('user');
      }
    }
  }
  
  // Notify group admins of any pending requests on group home page
  if(arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    // Load the current user
    global $user;
    
    // Check to see if user is logged in
    if($user->uid) {
      // Load the current node
      $node = node_load(arg(1));
      // Determine if this is a group
      if (og_is_group_type($node->type)) {
        // Check if current member is an admin
        if (og_is_group_admin($node, $user)) {
          // Check if there are pending requests
          $count = db_result(db_query("
            SELECT COUNT(uid) FROM {og_uid} 
            WHERE nid = %d AND is_active = 0", $node->nid));
            
          if($count) {
            drupal_set_message(t('There are currently !count pending membership requests. Click !here to view them.', array('!count' => $count, '!here' => l('here', 'og/users/' . $node->nid))));
          }
        }
      }
    }
  }
}

/*
 * Implementation of hook_nodeapi()
 */
function commons_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  
  switch ($op) {
    case 'validate':
      // Only act if the node was toggled as sticky
      if ($node->field_group_sticky[0]['value'] == 'Sticky') {
        $selected_groups = array();
        
        // Gather checked group ids, if any
        if (isset($node->og_groups)) {
          foreach ($node->og_groups as $gid) {
            // Capture only checked groups
            if ($gid) {
              $selected_groups[] = $gid;
            }
          }
        }

        // Check if any group options were checked
        if (!empty($selected_groups)) {
          // If inadequate permissions & roles, then check for group admin status in each group
          if (!user_access('administer nodes') && !array_search(variable_get('commons_manager_role', 'community manager'), $user->roles)) {
            foreach ($selected_groups as $gid) {
              if (!og_is_group_admin(node_load($gid), $user)) {
                form_set_error('og_groups', t('You can only make posts sticky for the groups that you are an admin for.')); 
              }
            }
          }
        }
        else {
          // No groups were selected
          form_set_error('field_group_sticky', t('You must specify a group in order to make this post group sticky.')); 
        }
      }
      
      break;
  }
}

// TAGGING

/*
 * Implementation of hook_tagging_suggestions()
 */
function commons_tagging_suggestions($vid, $node) {
  $suggestions = array();
  
  // Check if there are suggestions stored
  if ($tags = variable_get('commons_tag_suggestions', '')) {
    $tags = array_reverse(explode(',', $tags));
    foreach ($tags as $tag) {
      $suggestions[] = array(
        '#name' => trim($tag),
      );
    }
  }

  return $suggestions;
}

/*
 * Implementation of hook_form_tagging_admin_settings_alter()
 */
function commons_form_tagging_admin_settings_alter(&$form, &$form_state) {
  // Tell tagging to check hooks for suggestions
  variable_set('tagging_show_suggestion_example', 0);
  
  // Remove checkbox
  unset($form['tagging_show_suggestion_example']);
  
  // Add a field to supply static suggestions
  $form['commons_tag_suggestions'] = array(
    '#type' => 'textarea',
    '#title' => t('Static Tag Suggestions'),
    '#description' => t('Enter a comma-separated list of terms that will show up as tag suggestions when creating content items.'),
    '#weight' => -5,
    '#default_value' => variable_get('commons_tag_suggestions', ''),
  );
}

// POPUPS

function commons_popups() {
  return array(
    '*' => array(
      // Group subscribe links
      'a[href^=/og/subscribe/]',
    ),
    'node/*/aggregator' => array(
      // Add an RSS feed
      'a[href*=aggregator/add]',
    ),
    'og/manage/*' => array(
      'a[href^=/og/unsubscribe/]',
    ),
  );
}

// THEME

/*
 * Implementation of hook_theme()
 */
function commons_theme() {
  return array(
    'commons_user_stats_block' => array(),
  );
}

// Theme handler for user stats block
function theme_commons_user_stats_block($data) {
  $content = '<ul>';
  foreach($data as $item) {
    $content .= '<li>' . $item . '</li>';
  }
  $content .= '</ul>';
  
  return $content;
}
