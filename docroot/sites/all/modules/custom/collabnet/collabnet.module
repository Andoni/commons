<?php
// $Id: collabnet.module 
function collabnet_perm() {
  return array('administer CollabNet');
}

/**
 * Implementation of hook_theme().
 */
function collabnet_theme(&$existing, $type, $theme, $path) {
  $items['collabnet_projects'] = array(
	'template' => 'collabnet_projects', 
	'arguments' => array(
	  'rows' => NULL,
	),
  );
  return $items;
}

function collabnet_menu() {
  $items['admin/settings/collabnet'] = array(
    'title' => 'CollabNet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collabnet_settings'),
    'access arguments' => array('administer Collabnet'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/collabnet/settings'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'access arguments' => array('administer CollabNet'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/collabnet/test'] = array(
    'title' => 'Test Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collabnet_test_settings'),
    'access arguments' => array('administer CollabNet'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['teamforge'] = array(
    'title' => 'TeamForge Projects',
    'page callback' => 'collabnet_list_projects',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function collabnet_settings() {
  $collabnet_settings = variable_get('collabnet_settings', array());
  
  $form = array(
    'collabnet_settings' => array(
      '#type' => 'fieldset',
      '#title' => 'CollabNet Settings',
      '#tree' => TRUE,  
	  'username' => array(
	    '#type' => "textfield",
	    '#title' => 'Username',
        '#default_value' => $collabnet_settings['username'],
	  ),
	  'password' => array(
	    '#type' => "textfield",
	    '#title' => 'Password',
        '#default_value' => $collabnet_settings['password'],
	  ),
	  'endpoint' => array(
        '#type' => "textfield",
        '#title' => 'Base Endpoint URL',
        '#default_value' => $collabnet_settings['endpoint'],
        '#description' => 'Service endpoint excluding the service name.  Must end with a trailing slash.
          For example, http://socialteamforge.net/ce-soap50/services/',
      ),
      'baseurl' => array(
        '#type' => "textfield",
        '#title' => 'Base Jump To URL',
        '#default_value' => $collabnet_settings['baseurl'],
        '#description' => 'Base URL of the Jump To link within CollabNet. Must end with a trailing slash.
          When a project ID, document ID, or some other ID is appended to this base URL, a user will be 
          taken to that page within CollabNet.'
      ),
    ),
    'save' => array('#type'=>'submit','#value'=>'Save Configuration'),
  );
  return $form;
}

function collabnet_settings_submit($form, $postinfo) {
  // change around the account storage to an associative array indexed by username
  $collabnet_settings = $postinfo['values']['collabnet_settings'];
  variable_set('collabnet_settings', $collabnet_settings);
}

// Send a test message to the specificed addresses.
function collabnet_test_settings() {
  $form = array(
    'collabnet_test_settings' => array(
      '#type' => 'fieldset',
      '#title' => 'Collabnet Test Settings',
      '#tree' => TRUE,
      'test' => array(
        '#type' => 'submit',
        '#value' => 'Test Settings',
      ),
//      'sync' => array(
//        '#type' => 'submit',
//        '#value' => 'Sync Data',
//      ),
	),
  );
  
  return $form;
}

function collabnet_test_settings_submit($form, $postinfo) { 
  switch ($postinfo['clicked_button']['#value']) {
	
    case 'Sync Data':
      $doclist = 0;
      $sessionId = 0;

	  $result = collabnet_login();
	  if ($result['#error'] == FALSE) {
	    $sessionId = $result['#return'];
        $result = collabnet_getDocumentList($sessionId, 'docf1009', array());
        if ($result['#error'] == FALSE) {
          $doclist = $result['#return'];
          if ($doclist['dataRows']) {
            foreach ($doclist['dataRows'] as $key => $docinfo) {
	          collabnet_documentSave($docinfo);
            }
          }
        }
        collabnet_logoff();
      }
      break;

    default:
      // Call to get API version; does not require login
      $result = collabnet_getApiVersion();
	  if ($result['#error'] !== FALSE) {
	    drupal_set_message(t('<h2>Error!</h2><pre>!msg</pre>', array('!msg' => $result['#return']['faultstring'])), 'error'); 
	  }
	  else {
	    drupal_set_message(t('Connection succeeded. API version is: <pre>@return</pre>', array('@return' => print_r($result['#return'], TRUE))));
	  }

  }
}

function collabnet_list_projects() {
  $collabnet_settings = variable_get('collabnet_settings', array());  
  $projlist = 0;
  $sessionId = 0;

  $result = collabnet_login();
  if ($result['#error'] == FALSE) {
    $sessionId = $result['#return'];
    $result = collabnet_getProjectList($sessionId);
    if ($result['#error'] == FALSE) {
	  $projlist = $result['#return'];
      $header = array(
	    array(
		  'data' => 'Project Name',
		  'sort' => 'asc',
		  'width' => 120,
		),
	    array(
		  'data' => 'Description',
		),
		array(
	      'data' => 'Date Created',
          'sort' => 'desc',
	      'width' => 80,
	    ),
	  );
	  $rows = array();
	  foreach ($projlist['dataRows'] as $key => $project_info) {
        $project_link = $collabnet_settings['baseurl'] . $project_info['id'];
        $rows[] = array(
          l($project_info['title'], $project_link),
          $project_info['description'],
          format_date(strtotime($project_info['dateCreated']), 'custom', 'M d, Y'),
        );
      }
      $output = theme_table($header, $rows);
      //$output .= theme('pager', 2);
      //$output = theme('collabnet_projects', $projlist['dataRows']); 
      collabnet_logoff($sessionId);
	  return $output;
    }
    collabnet_logoff($sessionId);
  }
  drupal_set_message(t('<h2>Error!</h2><pre>Unable to retrieve project data. Please try back later.</pre>'), 'error'); 
}
  
function collabnet_documentSave($docinfo) {
    $changed = 0;
    $collabnet_changed = strtotime($docinfo['dateLastModified']);

    // Check to see if document has previously been imported
    $docnid = db_result(db_query("SELECT n.nid FROM {node} n 
      INNER JOIN {content_type_document} d 
      ON n.vid = d.vid
      WHERE d.field_teamforge_document_id_value = '%s'", $docinfo['id']));
    if ($docnid) {
	    $node = node_load($docnid);
	    $changed = $node->changed;
    }
    else {
      $node = new stdClass();
    }

    //dpm($node);

    // Set document data for update or create
    if ($collabnet_changed > $changed) {
      $node->type = 'document';
      $node->title = $docinfo['title'];
      $node->body = $docinfo['description'];
      $node->created = strtotime($docinfo['dateCreated']);
      $node->changed = strtotime($docinfo['dateLastModified']);
      $node->field_teamforge_document[0]['value'] = 'Yes';
      $node->field_teamforge_document_id[0]['value'] = $docinfo['id'];
      $node->field_teamforge_document_link[0]['url'] = 'http://socialteamforge.net/sf/go/' . $docinfo['id'];
      //$node->field_teamforge_file_link[0]['url'] = 'http://socialteamforge.net/sf/docman/do/downloadDocument/' . 
        //$docinfo['projectPathString'] . '/' . $docinfo['folderPathString'] . '/' $docinfo['id'];
      node_save($node);
    }
}

function collabnet_getProjectList($sessionId) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getProjectListRequest = new GetProjectListMessage();
  $getProjectListRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getProjectList', $getProjectListRequest);
  return $result;
}

function collabnet_getProjectData($sessionId, $projectId) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getProjectDataRequest = new GetProjectDataMessage();
  $getProjectDataRequest->projectId = $projectId;
  $getProjectDataRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getProjectData', $getProjectDataRequest);
  return $result;
}

function collabnet_getDocumentFolderList($sessionId, $parentId, $recursive) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getDocumentFolderListRequest = new GetDocumentFolderListMessage();
  $getDocumentFolderListRequest->parentId = $parentId;
  $getDocumentFolderListRequest->recursive = $recursive;
  $getDocumentFolderListRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getDocumentFolderList', $getDocumentFolderListRequest, 'DocumentApp');
  return $result;
}

function collabnet_getDocumentFolderData($sessionId, $folderId) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getDocumentFolderDataRequest = new GetDocumentFolderDataMessage();
  $getDocumentFolderDataRequest->folderId = $folderId;
  $getDocumentFolderDataRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getDocumentFolderData', $getDocumentFolderDataRequest, 'DocumentApp');
  return $result;
}

function collabnet_getDocumentList($sessionId, $parentId, $filters) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getDocumentListRequest = new GetDocumentListMessage();
  $getDocumentListRequest->parentId = $parentId;
  $getDocumentListRequest->filters = $filters;
  $getDocumentListRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getDocumentList', $getDocumentListRequest, 'DocumentApp');
  return $result;
}

function collabnet_getDocumentData($sessionId, $documentId, $documentVersion) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $getDocumentDataRequest = new GetDocumentDataMessage();
  $getDocumentDataRequest->documentId = $documentId;
  $getDocumentDataRequest->documentVersion = $documentVersion;
  $getDocumentDataRequest->sessionId = $sessionId;
  $result = collabnet_send_message('getDocumentData', $getDocumentDataRequest, 'DocumentApp');
  return $result;
}

function collabnet_login() {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $loginRequest = new LoginMessage();
  $loginRequest->userName = $collabnet_settings['username'];
  $loginRequest->password = $collabnet_settings['password'];

  $result = collabnet_send_message('login', $loginRequest);
  return $result;
}

function collabnet_logoff($sessionId) {
  $collabnet_settings = variable_get('collabnet_settings', array());  

  include_once('forgeService.php');

  $logoffRequest = new LogoffMessage();
  $logoffRequest->userName = $collabnet_settings['username'];
  $logoffRequest->sessionId = $sessionId;

  $result = collabnet_send_message('logoff', $logoffRequest);
  return $result;
}

function collabnet_getApiVersion() {
  $result = collabnet_send_message('getApiVersion', NULL);
  return $result;
}


// Send SOAP message.
function collabnet_send_message($operation, $params, $service='CollabNet') {

  // Check preferences
  $collabnet_settings = variable_get('collabnet_settings', array());
	
  $options = array();
  $options['namespace'] = '';
  $options['use'] = 'encoded';
  $options['style'] = 'rpc';  

  //$wsdl = 'http://localhost:8082/wsdl/' . $service . '.wsdl';
  $endpoint = $collabnet_settings['endpoint'] . $service;
  //$result = soapclient_init_client($wsdl, TRUE, $options);
  $result = soapclient_init_client($endpoint, FALSE, $options);

  if ( $result['#error'] !== FALSE ) {
    watchdog('collabnet', 'Failed to initialize SOAP client.', array(), WATCHDOG_ERROR);
    return $result;
  }

  $result = $result['#return']->call($operation, $params);

  if ( $result['#error'] !== FALSE ) {
	watchdog('collabnet', $result['#return']['faultstring'], array(), WATCHDOG_ERROR);
  }
  else {
    watchdog('collabnet', 'Successful call to operation ' . $operation . '.', array(), WATCHDOG_INFO);
  }
  	
  return $result;
  
} // End collabnet_send_message.
